#include "dirswidget.h"

#include <QtDebug>
#include <QPainter>

class IconItem;

DirsWidget::DirsWidget(QWidget *parent)
    : QWidget(parent)
    , _width()
{
    setAcceptDrops(true);
//    resize(1000, 700);

    _pageSize = pageSize;
    _width = _pageSize.width();
    _height = _pageSize.height();

    gridWidth = 13;
    gridHeight = 13;
    _col = _width / gridWidth;
    _row = _height / gridHeight;
    _iconsPerPage = _col * _row;
    _current  = 0;

    _local = LocalAppList::getList();

    for (int i = 0; i < _local->count(); i++)
    {
        _count = i / _iconsPerPage + 1;
    }

    for (int i = 0; i < _count; i++)
        _pages.insert(i, -(i * _width));

    for (int i = 0; i < _count; i++) {
        QList<QRect> newList;
        for (int j = 0; j < _col * _row; j++) {
            //vertical display
//            int x =  _pageSize.width() * i \
//                    + (j / _row) * gridWidth;
//            int y = (j % _row) * gridHeight;

            //horizontal display
            int x =  _pageSize.width() * i \
                    + (j % _col) * gridWidth;
            int y = (j / _col) * gridHeight;

            newList.insert(j, \
                           QRect(x, y, gridWidth, gridHeight));
        }
        _gridTable.insert(i, newList);

    }


    for (int i = 0; i < _count; i++) {
        QList<IconItem*> newList;
        for (int j = 0; j < _col * _row; j++)
            newList.insert(j, NULL);
        _iconTable.insert(i, newList);
    }

    for (int i = 0; i < _count; i++)
        _nextIdx.insert(i, 0);

    _animation = new QPropertyAnimation(this, "geometry");
    _animation->setEasingCurve(QEasingCurve::OutBack);

    setAcceptDrops(true);
    setAutoFillBackground(true);
    setFixedSize(_width * _count, _height);

    QPalette pal = palette();
    pal.setColor(QPalette::Background, QColor(0x00,0xff,0x00,0x00));
    setPalette(pal);


    /*for local desktop add addbutton*/
//    g_addIcon = new IconAddItem(tr(""),this);
//    g_addIcon->setVisible(false);

//    if (_local->count() == 0)
//        g_addIcon->setGeometry(_gridTable[0][0].translated(SPACING, SPACING));

    for (int i = 0; i < _local->count(); i++) {
        if (_local->at(i)->hidden())
            continue;

        if(_local->at(i)->isRemote())
        {
            addIcon(_local->at(i)->name(), _local->at(i)->icon(),
                    _local->at(i)->page(), _local->at(i)->index(), vappIcon);
        }else{
            addIcon(_local->at(i)->name(), _local->at(i)->icon(),
                    _local->at(i)->page(), _local->at(i)->index(), localIcon);
        }
    }



    dragLeftTimer = new QTimer(this);
    dragLeftTimer->setInterval(500);
    dragLeftTimer->setSingleShot(true);

    dragRightTimer = new QTimer(this);
    dragRightTimer->setInterval(500);
    dragRightTimer->setSingleShot(true);

    _addAction = new QAction(QString(tr("添加")), this);
    _deleteAction = new QAction(QString(tr("开始抖动")), this);
    _cancelAction = new QAction(QString(tr("取消抖动")), this);

    _arrangeWidget = new ArrangeWidget(this);
    _arrangeWidget->move(200,200);
    _arrangeWidget->setVisible(false);

    _desktopWidget = QApplication::desktop();
    _desktopRect = _desktopWidget->availableGeometry();

//    _dirWidget = new DirShowWidget(QSize(_desktopRect.width() ,240), this);
//    _dirWidget->setVisible(false);

//    _mW = new MoveWidget(this);
//    _mW->setVisible(false);

//    _animationScreen = new QPropertyAnimation(_mW, "geometry");

//    connect(_animationScreen,SIGNAL(finished()), this, SLOT(scrFinished()));
    connect(_arrangeWidget, SIGNAL(setPos(QPoint)), this, SLOT(arrangeWidgetMove(QPoint)));
    connect(_addAction, SIGNAL(triggered()), this, SLOT(appAdd()));
    connect(_deleteAction, SIGNAL(triggered()), this, SLOT(appDelete()));
    connect(_cancelAction, SIGNAL(triggered()), this, SLOT(appCancel()));

    connect(dragLeftTimer, SIGNAL(timeout()), this, SLOT(dragLeft()));
    connect(dragRightTimer, SIGNAL(timeout()), this, SLOT(dragRight()));

    connect(_local, SIGNAL(appAdded(const QString&, const QString&)), this, SLOT(addIcon(const QString&, const QString&)));
    connect(_local, SIGNAL(appRemoved(const QString&)), this, SLOT(delIcon(const QString&)));

    connect(&_communi, SIGNAL(appRun()), this, SLOT(runServerApp()));

//    connect(g_addIcon, SIGNAL(addApp()), this, SLOT(appAdd()));

}

DirsWidget::~DirsWidget()
{

}

//int DirsWidget::addDirIcon(const QString &text, const QString &iconPath, int page, int index)
//{

//}

void DirsWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.drawPixmap(0,0,width(), height(), QPixmap(":/images/local_bg.png"));
}

void DirsWidget::dragEnterEvent(QDragEnterEvent *event)
{

//    IconItem *source = qobject_cast<IconItem*> (event->source());
////    IconItem *source = qobject_cast<IconItem*>(event->source());
//    if (source) {
//        event->setDropAction(Qt::MoveAction);
//        event->accept();
//    } else {
//            event->ignore();
//        }
    if (event->mimeData()->hasFormat("iconitem")) {
        if (event->source() == this) {
            event->setDropAction(Qt::MoveAction);
            event->accept();
        } else {
            event->acceptProposedAction();
        }
    } else {
        event->ignore();
    }
    qDebug() << "dragEnterEvent******************";
}

void DirsWidget::dragMoveEvent(QDragMoveEvent *event)
{
qDebug() << "dragMoveEvent******************";
}

void DirsWidget::dragLeaveEvent(QDragLeaveEvent *event)
{
qDebug() << "dragLeaveEvent******************";
}

void DirsWidget::dropEvent(QDropEvent *event)
{

    if (event->mimeData()->hasFormat("iconitem")) {
        QByteArray itemData = event->mimeData()->data("iconitem");
        QDataStream dataStream(&itemData, QIODevice::ReadOnly);

        QString nameText;
        QString pixText;
        QString urlText;
        dataStream >> nameText >> pixText >> urlText;

        qDebug() << nameText;
        qDebug() << pixText;
        qDebug() << urlText;


        if (event->mimeData()->hasFormat("iconitem"))
        {
            if (event->source() == this) {
                event->setDropAction(Qt::MoveAction);
                event->accept();
            }
            else
            {
                event->acceptProposedAction();
            }

        }
        else
        {
            event->ignore();
        }
    }
}

//void VirtualDesktop::addLocalApp(const QString &text, const QString &pix, const QString &url)
//{
//    _url = url;
//    addIcon(text, pix, - 1, -1, urlIcon);

//}

/*
void DragWidget::dragEnterEvent(QDragEnterEvent *event)
{
    qDebug() << "0----------------0";
    if (event->mimeData()->hasFormat("application/x-dnditemdata")) {
        if (event->source() == this) {
            event->setDropAction(Qt::MoveAction);
            event->accept();
        } else {
            event->acceptProposedAction();
        }
    } else {
        event->ignore();
    }
}

void DragWidget::dragMoveEvent(QDragMoveEvent *event)
{
        qDebug() << "1----------------1";
    if (event->mimeData()->hasFormat("application/x-dnditemdata")) {
        if (event->source() == this) {
            event->setDropAction(Qt::MoveAction);
            event->accept();
        } else {
            event->acceptProposedAction();
        }
    } else {
        event->ignore();
    }
}

void DragWidget::dropEvent(QDropEvent *event)
{
        qDebug() << "2----------------2";
    if (event->mimeData()->hasFormat("application/x-dnditemdata")) {
        QByteArray itemData = event->mimeData()->data("application/x-dnditemdata");
        QDataStream dataStream(&itemData, QIODevice::ReadOnly);

        QPixmap pixmap;
        QPoint offset;
        dataStream >> pixmap >> offset;

        QLabel *newIcon = new QLabel(this);
        newIcon->setPixmap(pixmap);
        newIcon->move(event->pos() - offset);
        newIcon->show();
        newIcon->setAttribute(Qt::WA_DeleteOnClose);

        if (event->source() == this) {
            event->setDropAction(Qt::MoveAction);
            event->accept();
        } else {
            event->acceptProposedAction();
        }
    } else {
        event->ignore();
    }
}
*/
